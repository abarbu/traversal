[[tags: egg data]]
[[toc:]]

This page is maintained in the package's
[[https://github.com/abarbu/traversal|github repository]].

== Traversal

This is a Chicken Scheme egg which contains various list and vector
traversal functions. Many of the functions provided by this egg
originate from Jeff Siskind's QobiScheme.

=== overall

The final character of many of these functions denotes the compairson
function being used. 'q' compares with 'eq?', 'v' compares with
'eqv?', 'e' with 'equal?', 'p' and the lack of a final character
denotes that the function takes a user-provided predicate.

The following documentation uses the following notation: 'l' list,
'n' number, 'v' vector, 'p' procedure (usually a predicate).

Some of the functionality of this egg is provided by other eggs, like
srfi-1, with different naming conventions.

==== lists

<procedure>(countq x l)</procedure>
<procedure>(countv x l)</procedure>
<procedure>(counte x l)</procedure>
<procedure>(countp p x l)</procedure>
<procedure>(count-if p l)</procedure>
<procedure>(count-if-not p l)</procedure>

<procedure>(findq x l)</procedure>
<procedure>(findv x l)</procedure>
<procedure>(finde x l)</procedure>
<procedure>(findp p x l)</procedure>
<procedure>(find-if p l)</procedure>
<procedure>(find-if-not p l)</procedure>

<procedure>(positionq x l)</procedure>
<procedure>(positionv x l)</procedure>
<procedure>(positione x l)</procedure>
<procedure>(position p l)</procedure>
<procedure>(positionp p x l)</procedure>
<procedure>(position-if p l)</procedure>
<procedure>(position-if-not p l)</procedure>
<procedure>(vector-positione val vector)</procedure>

<procedure>(remove-if p l)</procedure>
<procedure>(remove-if-not p l)</procedure>
<procedure>(removee x l)</procedure>
<procedure>(removep p x l)</procedure>
<procedure>(removeq x l)</procedure>
<procedure>(removev x l)</procedure>

<procedure>(remove-duplicatesq l)</procedure>
<procedure>(remove-duplicatesv l)</procedure>
<procedure>(remove-duplicates p l)</procedure>
<procedure>(remove-duplicatese x l)</procedure>

<procedure>(list-set! l i x)</procedure>
<procedure>(list-insert l i x)</procedure>
<procedure>(list-remove l i)</procedure>
<procedure>(list-replace l i x)</procedure>

<procedure>(equivalence-classesq x)</procedure>
<procedure>(equivalence-classesv x)</procedure>
<procedure>(equivalence-classes p x)</procedure>
<procedure>(equivalence-classese x)</procedure>
<procedure>(transitive-equivalence-classes p x)</procedure>

<procedure>(adjoinq x l)</procedure>
<procedure>(adjoinv x l)</procedure>
<procedure>(adjoin x l)</procedure>
<procedure>(adjoinp p x l)</procedure>

<procedure>(rest l)</procedure>
<procedure>(but-last l)</procedure>
<procedure>(sublist list start end)</procedure>
<procedure>(every-other list)</procedure>

<procedure>(take-until p l)</procedure>
<procedure>(drop-until p l)</procedure>

Misc list manipulation stuff.

<procedure>(group-by key l)</procedure>

Find equivalence classes of the elements of l that are ''equal?''
given output of ''key''.

<procedure>(sort list predicate key)</procedure>

Merge sort.

<procedure>(lexicographically<? <? =?)</procedure>
<procedure>(minimal-membersp <? =? l)</procedure>

<procedure>(unzip l)</procedure>

Transposes lists.

=== creation

<procedure>(enumerate n)</procedure>
<procedure>(enumerate-vector n)</procedure>

Produce a list or a vector containing 0 through n-1.

=== assertions

<procedure>(some p l)</procedure>
<procedure>(some-n p n)</procedure>
<procedure>(some-vector p v)</procedure>
<procedure>(every-n p n)</procedure>
<procedure>(every-vector p v)</procedure>
<procedure>(one p l . &rest)</procedure>
<procedure>(one-n p n)</procedure>
<procedure>(one-vector p v . &rest)</procedure>

<procedure>(pairwise? p l)</procedure>

Does p hold on each adjacent pair of elements in l.

=== traversal

<procedure>(for-each-n f n)</procedure>
<procedure>(for-each-n-decreasing f n)</procedure>
<procedure>(map-n f n)</procedure>
<procedure>(map-n-vector f n)</procedure>
<procedure>(for-each-from-a-up-to-b f a b)</procedure>
<procedure>(for-each-m-n f m n)</procedure>
<procedure>(for-each-m-n-indexed f m n)</procedure>
<procedure>(for-each-m-n-dec f m n)</procedure>
<procedure>(map-m-n f m n)</procedure>
<procedure>(map-m-n-indexed f m n)</procedure>

<procedure>(for-each-vector f v . &rest)</procedure>
<procedure>(map-vector f v . &rest)</procedure>

Like 'vector-map' but take an arbitrary number of vectors.

<procedure>(map-linear f start end n)</procedure>

Map linearly between 'start' and 'end' in 'n' steps.

<procedure>(reduce-n f i n)</procedure>
<procedure>(reduce-vector f i v)</procedure>
<procedure>(map-reduce g i f l . ls)</procedure>
<procedure>(map-reduce-n g i f n)</procedure>
<procedure>(map-reduce-vector g i f v . vs)</procedure>
<procedure>(map-reduce2 g i f l)</procedure>
<procedure>(map-reduce3 g i f l1 l2)</procedure>

Reduces are left folds.

<procedure>(for-each-indexed f l)</procedure>
<procedure>(map-indexed f l)</procedure>
<procedure>(for-each-indexed-vector f v)</procedure>
<procedure>(map-indexed-vector f v . &rest)</procedure>

Passes 'f' both the element and an offset into the list/vector.

<procedure>(map-medial f l key)</procedure>

'f' is passed each adjacent pair of elements in l after being sorted
by the key. Key must return a number given each element of l.

<procedure>(all-pairs l)</procedure>
<procedure>(map-all-pairs f l)</procedure>

'f' is passed each adjacent pair of elements in l.

<procedure>(memp p x l)</procedure>
<procedure>(assp p x alist)</procedure>

Like memq and assq but take a predicate for comparison.

<procedure>(map-accum f i l)</procedure>

f will be passed the accumulator and each element of the list.

=== sets

<procedure>(set-unionq x y)</procedure>
<procedure>(set-unionv x y)</procedure>
<procedure>(set-union p x y)</procedure>
<procedure>(set-unione x y)</procedure>
<procedure>(set-unionvt x y)</procedure>

<procedure>(set-differenceq x y)</procedure>
<procedure>(set-differencev x y)</procedure>
<procedure>(set-difference p x y)</procedure>
<procedure>(set-differencee x y)</procedure>
<procedure>(set-differencevt x y)</procedure>

<procedure>(set-intersectionq x y)</procedure>
<procedure>(set-intersectionv x y)</procedure>
<procedure>(set-intersection p x y)</procedure>
<procedure>(set-intersectione x y)</procedure>
<procedure>(set-intersectionvt x y)</procedure>

<procedure>(set-equalq? x y)</procedure>
<procedure>(set-equalv? x y)</procedure>
<procedure>(set-equale? x y)</procedure>
<procedure>(set-equal? p x y)</procedure>

<procedure>(subsetq? x y)</procedure>
<procedure>(subsetv? x y)</procedure>
<procedure>(subsete? x y)</procedure>
<procedure>(subset? p x y)</procedure>
<procedure>(subsetvt? x y)</procedure>

==== rings

<procedure>(ring-backward l)</procedure>
<procedure>(ring-forward l)</procedure>
<procedure>(ring-forward-between r a b)</procedure>
<procedure>(ring-forward-to l o)</procedure>

These manipulate a list while treating it as a ring.

==== minimizing and maximizing

<procedure>(maximump l)</procedure>
<procedure>(minimump l)</procedure>
<procedure>(maximum p l)</procedure>
<procedure>(minimum p l)</procedure>
<procedure>(maximum-with-position l)</procedure>
<procedure>(minimum-with-position l)</procedure>

p is a function that returns a number.

==== math

<procedure>(sum l)</procedure>
<procedure>(sum p n)</procedure>
<procedure>(sum p l)</procedure>
<procedure>(product l)</procedure>
<procedure>(product p n)</procedure>
<procedure>(product p l)</procedure>

<procedure>(factorial n)</procedure>
<procedure>(choose n m)</procedure>

==== QobiScheme compatibility

<procedure>(qfind x l)</procedure>
<procedure>(qcount x l)</procedure>
<procedure>(qposition x l)</procedure>
<procedure>(qremove x l)</procedure>
<procedure>(qremove-duplicates l)</procedure>
<procedure>(qtopological-sort p l)</procedure>
<procedure>(qset-difference x y)</procedure>
<procedure>(qset-intersection x y)</procedure>
<procedure>(qset-union x y)</procedure>
<procedure>(qset-equal? x y)</procedure>
<procedure>(qreduce f l i)</procedure>
<procedure>(qreduce-vector f v i)</procedure>
<procedure>(qreduce-n f n i)</procedure>
<procedure>(qmap-reduce g i f l . ls)</procedure>
<procedure>(qmap-reduce-n g i f n)</procedure>
<procedure>(qmap-reduce-vector g i f v . vs)</procedure>
<procedure>(qequivalence-classes x)</procedure>
<procedure>(qtransitive-equivalence-classesp p x)</procedure>
<procedure>(qmaximum l)</procedure>
<procedure>(qminimum l)</procedure>
<procedure>(qmaximump l p)</procedure>
<procedure>(qminimump l p)</procedure>

=== License

   Copyright 1993-1995 University of Toronto. All rights reserved.
   Copyright 1996 Technion. All rights reserved.
   Copyright 1996 and 1997 University of Vermont. All rights reserved.
   Copyright 1997-2001 NEC Research Institute, Inc. All rights reserved.
   Copyright 2002-2013 Purdue University. All rights reserved.

   Contact Andrei Barbu at andrei@0xab.com.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Lesser General Public License for more details.
   You should have received a copy of the GNU Lesser General Public License
   along with this program.  If not, see http://www.gnu.org/licenses.
